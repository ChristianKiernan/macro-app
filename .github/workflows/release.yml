name: 🏷️ Release & Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Release notes"
        required: false
        type: string

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📈 Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Update changelog
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new version entry
          DATE=$(date +"%Y-%m-%d")
          VERSION="${{ steps.version.outputs.new_version }}"

          # Create temp file with new entry
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "${{ github.event.inputs.release_notes }}" ]; then
              echo "${{ github.event.inputs.release_notes }}"
            else
              echo "- Version bump to $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md
          } > CHANGELOG.tmp

          mv CHANGELOG.tmp CHANGELOG.md

      - name: 🔧 Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "🏷️ Release v${{ steps.version.outputs.new_version }}"

      - name: 🏷️ Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: 📋 Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "notes=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          else
            echo "notes=Release v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

  deploy-release:
    name: 🚀 Deploy Release
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🚀 Trigger production deployment
        run: |
          echo "✅ Release created successfully!"
          echo "🚀 Production deployment will be triggered by the push to main branch"
