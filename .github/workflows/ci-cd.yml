name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18.x"

jobs:
  # ===== CONTINUOUS INTEGRATION =====
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build application
        run: npm run build
        env:
          # Use a dummy DATABASE_URL for build
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          NEXTAUTH_SECRET: "dummy-secret-for-build"
          NEXTAUTH_URL: "http://localhost:3000"

  # ===== TYPE CHECKING =====
  type-check:
    name: 🔍 TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check types
        run: npx tsc --noEmit

  # ===== SECURITY AUDIT =====
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🛡️ Run security audit
        run: npm audit --audit-level=moderate

  # ===== CONTINUOUS DEPLOYMENT =====
  deploy-production:
    name: 🚀 Deploy to Production
    needs: [test-and-build, type-check, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://macro-app-production.vercel.app

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"

  # ===== PREVIEW DEPLOYMENT =====
  deploy-preview:
    name: 📋 Deploy Preview
    needs: [test-and-build, type-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # ===== DATABASE MIGRATION =====
  migrate-database:
    name: 🗃️ Migrate Database
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: � Baseline existing migrations
        run: |
          # Mark existing migrations as applied to baseline the production database
          npx prisma migrate resolve --applied "20250828162121_init" || echo "Migration already resolved"
          npx prisma migrate resolve --applied "20250828183755_add_password_field" || echo "Migration already resolved"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: �🗃️ Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # ===== NOTIFICATION =====
  notify-deployment:
    name: 📢 Notify Deployment
    needs: [deploy-production, migrate-database]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Deployment Status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ] && [ "${{ needs.migrate-database.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
